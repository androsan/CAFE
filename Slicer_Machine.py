import os
import numpy as np
from tkinter import filedialog
from tkinter import *
import matplotlib
import matplotlib.pyplot as plt
plt.ion()

""" =====================================  F  U  N  C  T  I  O  N  S ================================================================"""
# Loading temperature field (unit: KELVIN)in corresponding space (YP) and time (TR) related folder
def Load_salome(naslov, x):
    salome = np.load(naslov+'/salome_'+str(x)+'.npy')
    return salome

def Stack_2 (naslov_1st, naslov_2nd, cif):
    yp_1st =  Load_salome(naslov_1st, cif)
    yp_2nd = Load_salome(naslov_2nd, cif)
    yp_stacked = np.dstack((yp_1st,yp_2nd ))
    return yp_stacked

'''============================================================================================================='''
""" ====================================  F  I  L  E  S    &   F  O  L  D  E  R  S ========================================================"""
case =            'SLM_2D_Source'
subcase =       '0002'

PATH =           'C:/sm-2018-w64-0-3/WORK/'+case+'_Files/post processing database/'+subcase+'/'


#mapa    =       'INTER  time=40, space=8  Z[7-8], X[15-27], Y[12-97], 1500°C, N=12/'
mapa    =         'INTER  time=1, space=8  Z[0-9], X[15-27], Y[12-97], 1500°C, N=12/'
'''============================================================================================================='''

'''===============================================>MICROSTRUCTURE<============================================'''
track =                           '2D 1st order Moore, real field/'

flashies_RGB =       track+'flashies_RGB/'                          #  Subfolder with time-snap 3D matrices, i.e. flashies
flashies_faza =        track+'flashies_faza/'

cuts_RGB =            track+'cuts_RGB/'                               #  Subfolder with cut 3D matrices, i.e. cuts
cuts_faza =             track+'cuts_faza/'
'''============================================================================================================='''

'''===============================================>TEMPERATURE field<============================================'''

YPN = ['YP0  [12,20]', 'YP1  [19,27]', 'YP2  [26,34]', 'YP3  [33,41]', 'YP4  [40,48]', 'YP5  [47,55]',   ]
TMN = ['TR0  [0,1]', 'TR1  [1,2]', 'TR2  [2,3]', 'TR3  [3,4]', 'TR4  [4,5]', 'TR5  [5,6]', 'TR6  [6,7]', 'TR7  [7,8]', 'TR8  [8,9]',
            'TR9  [9,10]', 'TR10  [10,11]', 'TR11  [11,12]', 'TR12  [12,13]', 'TR13  [13,14]',  'TR14  [14,15]',  'TR15  [15,16]', 'TR16  [16,17]', ]

'''**********************'''
ypn_index =     0    #4
tmn_index =     2    #8

TIME_step =    0    #2392
'''**********************'''

YP0 = YPN[ypn_index]
YP1 = YPN[ypn_index+1]
TM = TMN[tmn_index]

time_factor_folder =     '/time_factor_24/time_factor_3'
'''============================================================================================================='''

shranjuj_animacijo =     False
animation_figures =      'figures'
cmap = 'jet'


Tmelt =                          1507            # Melting Point (in Celsius)
dTliq =                              50            
Tliquidus = Tmelt + dTliq                    # Liquidus line (in Celsius)
dTund =                            -2             
Tunder= Tmelt + dTund                      # Undercooling (in Celsius)

cell_size =                  5e-06 / 8         # ..to calculate real dimensions of melt-pool
#time_step =               5e-06 / 8        # for salome_4D

temp_range = (3860, 298)  # for SLM ,   COLORBAR Temperature range (vmax, vmin) for plt.colorbar showing Temp. scale; unit: deg. CELSIUS [deg. C]


__name__='_'

'''===================== GUI - grafični vmesnik za razrez 3D matrike in predstavitev v 2D ===================================================='''

master = Tk(); master.geometry('1000x825+0+0'); master.title('Cut & Project by Andro')

directory = StringVar() ; directory.set(PATH+mapa)
micro_directory = StringVar(); micro_directory.set(PATH+mapa+flashies_RGB)
micro_display = StringVar() ; micro_display.set('... '+micro_directory.get()[-75:])
temp_I_directory = StringVar(); temp_I_directory.set(PATH+mapa+YP0+'/'+TM+time_factor_folder+'/')
temp_II_directory = StringVar(); temp_II_directory.set(PATH+mapa+YP1+'/'+TM+time_factor_folder+'/')
temp1_display = StringVar(); temp2_display = StringVar()
temp1_display.set('... '+temp_I_directory.get()[-75:]); temp2_display.set('... '+temp_II_directory.get()[-75:])

globina_micro = IntVar(); globina_micro.set(0)
globina_temp = IntVar(); globina_temp.set(71)

increment=IntVar(); increment.set(1)
time_increment = IntVar(); time_increment.set(1)
korak = IntVar(); korak.set(TIME_step)
thresh = DoubleVar(); thresh.set(Tmelt)
liquidus = DoubleVar() ; liquidus.set(Tliquidus)
under = DoubleVar(); under.set(Tunder)

lab1 = Label(master, text='     2D projection of 3D microstructure, generated by CA', font=('Arial', '12'))
lab1.grid(row=5, column=9, columnspan=4, sticky=W)

lab2= Label (master, textvariable=directory, bg='black', fg='white', height=2, width=130)
lab2.grid(row=6, column=10, columnspan=4, sticky=W)

lab3= Label(master, text='AXIS: ', font=('Arial', '20'))
lab3.grid(row=12, column=10, sticky=E)

lab6= Label (master, text='', height=1)
lab6.grid(row=13, column=10)

lab4= Label(master, text=' Depth: ', font=('Arial', '20'))
lab4.grid(row=14, column=10, sticky=E)

lab7= Label(master, text=' Depth Increment: ', font=('Arial', '14'))
lab7.grid(row=15, column=10, sticky=NE)

lab5= Label(master, text='', height=3)
lab5.grid(row=16, column=10)

v = IntVar(); v.set(2)
rdb1= Radiobutton(master, text=" Z ", variable=v, value=2, font=('Arial', '20'), indicatoron=0, width=11)
rdb2= Radiobutton(master, text=" X ", variable=v, value=0, font=('Arial', '20'), indicatoron=0, width=11)
rdb3= Radiobutton(master, text=" Y ", variable=v, value=1, font=('Arial', '20'), indicatoron=0, width=11)
rdb1.grid(row=12, column=11)
rdb2.grid(row=12, column=12)
rdb3.grid(row=12, column=13)

ent1= Entry(master, textvariable= globina_micro, font=('Arial', '30'), justify='center', width=4)
ent6 = Entry(master, textvariable= globina_temp, font=('Arial', '30'), justify='center', width=4)
ent2= Entry(master, textvariable= increment, font=('Arial', '14'), justify='center', width=15)
ent1.grid(row=14, column=11, sticky =W)
ent6.grid(row=14, column=11, sticky=E)
ent2.grid(row=15, column=11, sticky=N)

lab20 = Label (master, textvariable=micro_display, bg='black', fg='lime', height=2, width=69, font=('Arial', '12'), justify='right')
lab21 = Label (master, textvariable=temp1_display, bg='black', fg='#ffbf00', height=2, width=69, font=('Arial', '12'), justify='right')
lab27 = Label (master, textvariable=temp2_display, bg='black', fg='#ffbf00', height=2, width=69, font=('Arial', '12'), justify='right')

lab20.grid(row=8, column=10, columnspan=6, sticky=E) 
lab21.grid(row=9, column=10, columnspan=6, sticky=E)
lab27.grid(row=10, column=10, columnspan=6, sticky=E)

zdim = StringVar(); xdim = StringVar(); ydim = StringVar(); zdim_micro = StringVar()

lab22= Label(master, text='Domain Dimensions (cells): ', font=('Arial', '16'), height=2)
lab23 = Label (master, textvariable=zdim, bg='grey', fg='aqua', height=1, width=5, font=('Arial', '20'))
lab28 = Label (master, textvariable=zdim_micro, bg='grey', fg='#ff99ff', height=1, width=6, font=('Arial', '20'))
lab24 = Label (master, textvariable=xdim, bg='grey', fg='aqua', height=1, width=11, font=('Arial', '20'))
lab25 = Label (master, textvariable=ydim, bg='grey', fg='aqua', height=1, width=11, font=('Arial', '20'))

lab22.grid(row=11, column=10, sticky=E)
lab23.grid(row=11, column=11, sticky=E)
lab24.grid(row=11, column=12)
lab25.grid(row=11, column=13)
lab28.grid(row=11, column=11, sticky=W)

def izberi_MICROSTRUCTURE_direktorij():
    direktorij = directory.get()
    direktorij = filedialog.askdirectory()
    micro_directory.set(direktorij)
    micro_display.set('... '+direktorij[-75:])
    
def izberi_TEMPERATURE_I_direktorij():
    direktorij = directory.get()
    direktorij = filedialog.askdirectory()
    temp_I_directory.set(direktorij)
    temp1_display.set('... '+direktorij[-75:])

def izberi_TEMPERATURE_II_direktorij():
    direktorij = directory.get()
    direktorij = filedialog.askdirectory()
    temp_II_directory.set(direktorij)
    temp2_display.set('... '+direktorij[-75:])



'''==========================================================================================================================='''

# Get time matrix
def Load_Time_Step(num):
    global micro, Z,X,Y, field
    """ Temperature (Celsius)"""
    field=Stack_2(temp_I_directory.get(), temp_II_directory.get(), num)- 273    
                                                                              
    Z=field.shape[0] ; Y=field.shape[1];  X=field.shape[2]
    zdim.set(str(Z)+'   '); xdim.set(X); ydim.set(Y)
    """ Microstructure """
    try:
        micro=np.load(micro_directory.get()+'/flashy_RGB_'+str(num)+'.npy')
    except FileNotFoundError:
        micro=np.zeros((Z,X,Y,3))
    Zmicro = micro.shape[0] ; zdim_micro.set('  '+str(Zmicro))


# Funkcije razrezov 3D objekta v smereh Z, Y in X:

from mpl_toolkits.axes_grid1 import make_axes_locatable

f=plt.figure()
g=f.gca()

def cut_plane(figura, matrix1, matrix2, depth1, depth2, step):
    global barvni_kljuc, phase, x_dim

    thresh_melt = round((thresh.get()- Tmelt)*100/ Tmelt, 1)
    axs[0].set_title('MICROSTRUCTURE', fontsize=11)
    
    phase=np.full(matrix2.shape+(3,), (92, 92, 138))      # grey blue             
    phase[matrix2>=under.get()]=        (204,51,0)              # red
    phase[matrix2>=thresh.get()]=       (255,153,0)            # orange
    phase[matrix2>=liquidus.get()]=     (254,254,153)         # light yellow

    e=np.zeros(phase.shape)
    p=phase[:,:,:,0]
    e[p==92]=0; e[p==255]=1
    
    if v.get()== 2:  # Z_cut
        plt.ylabel('X'); plt.xlabel('Y')
        #fig.suptitle('Smer: Z, {0}% od začetka domene, TIME: {1} msec. (step # {2})'.format(round((depth+1)*100/Z, 1), "%6.3f" % (round(step*TIME_step*1000, 3)), step), fontsize=14)
        axs[0].imshow(matrix1[depth1,:,:], cmap=cmap, interpolation='bessel')
        axs[1].imshow(phase[depth2,:,:])
        x_dim= np.int(np.max(np.sum(e[depth2,:,:],axis=0))*cell_size* 1e6) ;  y_dim= np.int(np.max(np.sum(e[depth2,:,:],axis=1) )*cell_size*1e6)
        axs[1].set_title('MELT-POOL,  X_size: '+str(x_dim)+u' \u03BCm,  Y_size: '+str(y_dim)+u' \u03BCm, Tmelt = '+str(thresh.get())+u' \u2103')
        temp=matrix2[depth2,:,:]

        g.imshow(matrix1[depth1,:,:], interpolation=None)
        

    elif v.get()== 1:  # Y_cut
        plt.ylabel('Z'); plt.xlabel('X')
        #fig.suptitle('Projekcija v smeri Y, {0}% od začetka domene, TIME: {1} msec. (step # {2})'.format(round(depth*100/X, 1), "%6.3f" % (round(step*TIME_step*1000, 3)), step), fontsize=14)
        #plt.gca().invert_yaxis()
        axs[0].imshow(matrix1[:,:,depth1], cmap=cmap, origin='lower', interpolation='bessel')
        axs[1].imshow(phase[:,:,depth2], origin='lower')
        x_dim= np.int(np.max(np.sum(e[:,:,depth2],axis=0))*cell_size* 1e6) ;  y_dim= np.int(np.max(np.sum(e[:,:,depth2],axis=1) )*cell_size*1e6)
        axs[1].set_title('MELT-POOL,  Z_size: '+str(x_dim)+u' \u03BCm,  X_size: '+str(y_dim)+u' \u03BCm, Tmelt = '+str(thresh.get())+u' \u2103')
        temp=matrix2[:,:,depth2]

        g.imshow(matrix1[:,:,depth1], interpolation=None)
        
    elif v.get()== 0:  # X_cut
        plt.ylabel('Z'); plt.xlabel('Y')
        #plt.suptitle('Projekcija v smeri X, {0}% od začetka domene, TIME: {1} msec. (step # {2})'.format(round(depth*100/Y, 1), "%6.3f" % (round(step*TIME_step*1000, 3)), step), fontsize=14)
        #plt.gca().invert_yaxis()
        axs[0].imshow(matrix1[:,depth1,:], cmap=cmap, origin='lower', interpolation='bessel')
        axs[1].imshow(phase[:,depth2,:], origin='lower')
        x_dim= np.int(np.max(np.sum(e[:,depth2,:],axis=0))*cell_size* 1e6) ;  y_dim= np.int(np.max(np.sum(e[:,depth2,:],axis=1) )*cell_size*1e6)
        axs[1].set_title('MELT-POOL,  Z_size: '+str(x_dim)+u' \u03BCm,  Y_size: '+str(y_dim)+u' \u03BCm, Tmelt = '+str(thresh.get())+u' \u2103')        
        temp=matrix2[:,depth2,:]

        g.imshow(matrix1[:,depth1,:], interpolation=None)

        

    Tmin=round(np.min(temp), 1); Tmax=round(np.max(temp), 1)
    ax2=axs[2].imshow(temp, cmap='hot', vmax=temp_range[0], vmin=temp_range[1], origin='lower', interpolation='bessel')
    axs[2].set_title('TEMPERATURE, Tmax = '+str(Tmax)+u' \u2103,  Tmin = '+str(Tmin)+u' \u2103')

    divider = make_axes_locatable(axs[2])
    cax2 = divider.append_axes("right", size="4%", pad=0.15)
    if bool(barvni_kljuc):
        barvni_kljuc.remove()
    barvni_kljuc = fig.colorbar(ax2, cax=cax2); barvni_kljuc.set_label('Temperature ['+u'\u2103]', rotation=90)


fig, axs = plt.subplots(nrows=3, sharex=True, sharey=False, figsize=(5,8)); barvni_kljuc=False

def prerez(direction):
    global fig, axs
    
    t=korak.get()
    if direction=='neutral':
        pass
    elif direction=='plus':
        t+= time_increment.get()
    elif direction=='minus':
        t-= time_increment.get()

    korak.set(t)
    Load_Time_Step(t); axis = v.get()
    a=globina_micro.get(); b=globina_temp.get()
    try:
        cut_plane(fig, micro, field, a,b, t)
    except _tkinter.TclError:
        fig, axs = plt.subplots(nrows=3, sharex=True, sharey=False, figsize=(5,8)); barvni_kljuc=False
        


""" ------------------------------------- super cool (a.k.a. flashy) animation :) ------------------------------------- """

tt = korak.get()
def ani():
    global tt, fig, axs, ani_run
    try:
        Load_Time_Step(tt)
    except FileNotFoundError:
        master.after_cancel(ani_run)
    a=globina_micro.get(); axis = v.get()
    b=globina_temp.get()
    cut_plane(fig, micro, field, a, b, tt)
    if shranjuj_animacijo:
        try:
            plt.savefig(directory.get()+'/'+animation_figures+'/figure_'+str(tt)+'.png', bbox_inches='tight')
        except FileNotFoundError:
            os.mkdir(directory.get()+'/'+animation_figures)
            plt.savefig(directory.get()+'/'+animation_figures+'/figure_'+str(tt)+'.png', bbox_inches='tight')
    tt+=1
    
    ani_run=master.after(300,ani)


ani_safety_switch = False
def start_animation():
    global ani_safety_switch
    if not ani_safety_switch:
        ani(); ani_safety_switch=True

def stop_animation():
    global ani_safety_switch, tt
    ani_safety_switch=False
    try:
        master.after_cancel(ani_run)
    except NameError:
        pass
    tt= korak.get()
    return tt



"""++++++++++++++++++++++++++++ FAST creation of .png animation figures by multiprocessing +++++++++++++++++++++++++++++++++++++++++++++++"""
'''
import multiprocessing
import concurrent.futures

first =        10
last =         233
picker =     1
g= 9
smer = 2

def fast_image_saver(im_counter, a, axis):
    global fig, axs
    Load_Time_Step(im_counter)
    #a=globina.get(); axis = v.get()
    b=int(a)  
    cut_plane(fig, micro, field, b, im_counter)
    try:
        plt.savefig(directory.get()+'/'+animation_figures+'/figure_'+str(im_counter)+'.png', bbox_inches='tight')
    except FileNotFoundError:
        os.mkdir(directory.get()+'/'+animation_figures)
        plt.savefig(directory.get()+'/'+animation_figures+'/figure_'+str(im_counter)+'.png', bbox_inches='tight')
    return im_counter


if __name__ == '__main__':

    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        rezultati = []
        for slika in range(first,last,picker):
            rezultati.append(executor.submit(fast_image_saver, slika, g, smer))
            #fast_image_saver(slika, g, smer)

        out=[i.result()for i in rezultati]
''' 
"""-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"""    

def Shift_Cut(direction):
    a=globina_micro.get(); b=globina_temp.get()
    if direction=='plus':
        a+= increment.get(); b+= increment.get()
    elif direction=='minus':
        a-= increment.get(); b-= increment.get()

    H = {0:[int(xdim.get()), int(xdim.get())],
             1:[int(ydim.get()), int(ydim.get())], 
             2:[int(zdim_micro.get()), int(zdim.get())],}
    
    axis = v.get()
    
    if (a>=0 and b>=0) and (a<H[axis][0] and b<H[axis][1]):
        globina_micro.set(a); globina_temp.set(b)
        cut_plane(fig, micro, field, a, b, korak.get())
    else:
        if direction=='plus':
            a-= increment.get(); b-= increment.get()
        elif direction=='minus':
            a+= increment.get(); b+= increment.get()
        globina_micro.set(a); globina_temp.set(b)
        cut_plane(fig, micro, field, a, b, korak.get())
          
    


but2= Button(master, text=' + ', font=('Arial', '30'), width=5, command=lambda: Shift_Cut('plus'), height=2)
but2.grid(row=14, column=12, rowspan=2)
but3= Button(master, text=' - ', font=('Arial', '30'), width=5, command=lambda: Shift_Cut('minus'), height=2)
but3.grid(row=14, column=13, rowspan=2)

#lab8= Label(master, text='      '); lab8.grid(row=18, column=9)

lab9= Label(master, text=' Time Step: ', font=('Arial', '20'))
lab9.grid(row=19, column=10, sticky=E)

ent3= Entry(master, textvariable= korak, font=('Arial', '30'), justify='center', width=8)
ent3.grid(row=19, column=11)

but9= Button(master, text=' + ', font=('Arial', '30'), width=5, command=lambda:prerez('plus'), height=2)
but9.grid(row=19, column=12, rowspan=2)
but10= Button(master, text=' - ', font=('Arial', '30'), width=5, command=lambda:prerez('minus'), height=2)
but10.grid(row=19, column=13, rowspan=2)


def wrapper(e):
    print("<Return> was pressed on a button!")
    e.widget.invoke()
master.bind_class("Button","<Return>",wrapper)


lab26= Label(master, text=' Time Increment: ', font=('Arial', '14'))
lab26.grid(row=20, column=10, sticky=NE)

ent5= Entry(master, textvariable= time_increment, font=('Arial', '14'), justify='center', width=15)
ent5.grid(row=20, column=11, sticky=N)

lab10= Label(master, text='      ')
lab10.grid(row=21, column=9)

'''..................... Showing temperature and phase fields .....................'''

lab11= Label(master, text='  Temperature Treshold ['+u'\u2103]: ', font=('Arial', '20'))
lab11.grid(row=25, column=10, sticky=E)

ent4= Entry(master, textvariable= under, font=('Arial', '30'), justify='center', width=8, bg='#5c5c8a', fg='#cc3300')
ent4.grid(row=25, column=11)

ent7= Entry(master, textvariable= thresh, font=('Arial', '30'), justify='center', width=8, bg='#5c5c8a', fg='#ff9900')
ent7.grid(row=25, column=12)

ent8= Entry(master, textvariable= liquidus, font=('Arial', '30'), justify='center', width=8, bg='#5c5c8a', fg='#ffff99')
ent8.grid(row=25, column=13)

lab12= Label(master, text='undercooling', font=('Arial', '10'))
lab12.grid(row=26, column=11)

lab13= Label(master, text='melting point', font=('Arial', '10'))
lab13.grid(row=26, column=12)

lab14= Label(master, text='liquidus', font=('Arial', '10'))
lab14.grid(row=26, column=13)

lab15= Label(master, text='      '); lab15.grid(row=27, column=9)

but4= Button(master, text= 'LOAD STEP', font=('Arial', '32'), bg='grey', fg='#ffff99', width=20, command=lambda:prerez('neutral'), height=1)
but4.grid(row=28, column=10, columnspan=2)

but5= Button(master, text= 'Animate!', font=('Arial', '22'), fg='green', width=10, command=start_animation, height=2)
but5.grid(row=28, column=12)

but6= Button(master, text= 'Stop', font=('Arial', '22'), fg='red', width=10, command=stop_animation, height=2)
but6.grid(row=28, column=13)

but7= Button(master, text= 'MICROSTRUCUTRES', font=('Arial', '15'), fg='lime', bg='grey', width=25, command=izberi_MICROSTRUCTURE_direktorij)
but7.grid(row=8, column=10, columnspan=6,sticky=W)
but8= Button(master, text= 'TEMPERATURES I', font=('Arial', '15'), fg='#ffbf00', bg='grey', width=25, command=izberi_TEMPERATURE_I_direktorij)
but8.grid(row=9, column=10, columnspan=6,sticky=W)
but11= Button(master, text= 'TEMPERATURES II', font=('Arial', '15'), fg='#ffbf00', bg='grey', width=25, command=izberi_TEMPERATURE_II_direktorij)
but11.grid(row=10, column=10, columnspan=6,sticky=W)

lab111= Label (master, text=20*'', height=2); lab111.grid(row=9, column=8, sticky=W)
lab112= Label (master, text=20*'', height=2); lab112.grid(row=10, column=8)
#master.mainloop()













